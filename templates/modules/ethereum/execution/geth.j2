# Nixobolus - Automated creation of bootable NixOS images
# https://github.com/ponkila/Nixobolus

{#- Paths #}
{%- set eth = data.services.ethereum %}
{%- set geth = eth.clients.geth %}

{#- General #}
{%- set enable = geth.enable | default(true) | lower %}
{%- set extraArgs = geth.extraArgs | default([]) %}
{%- set network = geth.network or eth.network | default("mainnet") %}
{%- set openFirewall = geth.openFirewall | default(true) | lower %}
{%- set package = geth.package | default("pkgs.geth") %}
{#- Mainnet (null) is the default ethereum network. #}
{% if network in ['mainnet'] %}
    {% set network = none %}
{% endif %}

{#- Args #}
{%- macro geth_config(geth) %}
    {%- set items = {
        'bootnodes':                    geth.bootnodes                      | default(none),
        'dataDir':                      geth.datadir                        | default(none),
        'gcmode':                       geth.gcmode                         | default("full"),
        'maxpeers':                     geth.maxpeers                       | default(50),
        'netrestrict':                  geth.netrestrict                    | default(none),
        'network':                      network                             | default(none),
        'networkid':                    geth.networkid                      | default(1),
        'nodiscover':                   geth.nodiscover                     | default(false),
        'port':                         geth.port                           | default(30303),
        'syncmode':                     geth.syncmode                       | default("snap"),
        'verbosity':                    geth.verbosity                      | default(3),
    } %}
    {{- filter_macro(items, items.keys()) }}
{%- endmacro %}

{#- HTTP-Server #}
{%- set http = geth.http | default({}) %}
{%- macro http_config(http) %}
    {%- set items = {
        'addr':         http.addr       | default("127.0.0.1"),
        'api':          http.api        | default(none),
        'corsdomain':   http.corsdomain | default(none),
        'enable':       http.enable     | default(true),
        'port':         http.port       | default(8545),
        'rpcprefix':    http.rpcprefix  | default(none),
        'vhosts':       http.vhosts     | default(["localhost"]),
    } %}
    {{- filter_macro(items, items.keys()) }}
{%- endmacro %}

{#- Websocket #}
{%- set ws = geth.ws | default({}) %}
{%- macro ws_config(ws) %}
    {%- set items = {
        'addr':     ws.addr     | default("127.0.0.1"),
        'api':      ws.api      | default(none),
        'enable':   ws.enable   | default(true),
        'port':     ws.port     | default(8546),
    } %}
    {{- filter_macro(items, items.keys()) }}
{%- endmacro %}

{#- RPC-Authentication #}
{%- set authrpc = geth.authrpc | default({}) -%}
{%- macro authrpc_config(authrpc) -%}
    {%- set items = {
        'addr':         authrpc.addr        | default("127.0.0.1"),
        'jwtsecret':    authrpc.jwtsecret   | default(none),
        'port':         authrpc.port        | default(8551),
        'vhosts':       authrpc.vhosts      | default(["localhost"]),
    } %}
    {{- filter_macro(items, items.keys()) }}
{%- endmacro -%}

{#- Metrics #}
{%- set metrics = geth.metrics | default({}) %}
{%- macro metrics_config(metrics) %}
    {%- set items = {
        'addr':     metrics.addr    | default("127.0.0.1"),
        'enable':   metrics.enable  | default(true),
        'port':     metrics.port    | default(6060),
    } %}
    {{- filter_macro(items, items.keys()) }}
{%- endmacro %}

{#- Remove key-value pairs with value of 'none' #}
{#- Also adds double quotes for strings #}
{%- macro filter_macro(config, keys) %}
    {%- for key in keys %}
        {%- if config[key] is not none %}
            {%- if config[key] in ["true", "false"] %}
            {{ key }} = {{ config[key] | lower }};
            {%- else %}
            {{ key }} = {{ config[key] | tojson }};
            {%- endif %}
        {%- endif %}
    {%- endfor %}
{%- endmacro %}

{# Geth #}
{ config, pkgs, ... }:
{
    services.ethereum.geth.{{ network }} = {
        enable = {{ enable }};
        extraArgs = {{ extraArgs }};
        openFirewall = {{ openFirewall }};
        package = {{ package }};
        args = {
            {{- geth_config(geth) }}
            http = {
                {{- http_config(http) | indent(4) }}
            };
            ws = {
                {{- ws_config(ws) | indent(4) }}
            };
            authrpc = {
                {{- authrpc_config(authrpc) | indent(4) }}
            };
            metrics = {
                {{- metrics_config(metrics) | indent(4) }}
            };
        };
    };
}