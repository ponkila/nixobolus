---
# Nixobolus - Automated creation of bootable NixOS images
# https://github.com/ponkila/Nixobolus

### Info
#
#   This YAML file defines the configuration for each machine. Each machine is represented as a list item with key-value
#   pairs for various settings.
#
#   Settings declared in the "general" section apply to all hosts and will be overwritten by the values in host section if they are the same.
#   Any settings not explicitly defined in the YAML file section will default to the values specified in the corresponding Jinja2 templates.

### Adding custom templates
#
#   To add a custom template, create a new file in the "templates" directory or any subdirectory under it.
#   The rendering script dynamically imports any templates located under the "templates" directory to default.nix file.
# 
#   Note that the filename of the new template needs to match with a key name in the this file.
#   In a case where the template file is named "default.j2", the rendering script will check if the parent directory
#   name matches with a key in this file. If there's a match, it will import and render the template as module.

# Store commonly used values to be referenced later.
variables:
    var_1: &example_1 192.168.1.111
    var_2: &example_2 192.168.1.112

# General settings that apply to all machines.
general:
    user: "admin"
    system: "x86_64-linux" # Only 'x86_64-linux' available at the moment
    timezone: "Europe/Lisbon"
    font: "monospace"
    keymap: "us"

    home_manager:
        enable: true
        nix_packages: [ file, tree, bind ]
        programs: [ tmux, htop, vim, git ]

    services:
        ssh:
            enable: true
            permit_root_login: false
            password_auth: false
            public_keys:
                - "<public_key_1>"
                - "<public_key_2>"

# Specific configuration for each individual machine. 
hosts:
    - name: "hostname_1"
      # Storing addr as variable to be referenced later
      services:

        mounts:
            - source: "/dev/disk/by-label/erigon"
              target: "/var/mnt/erigon"
              desc: "Erigon Storage"
              options: [ noatime ]
            - source: "/dev/disk/by-label/lighthouse"
              target: "/var/mnt/lighthouse"
              desc: "Lighthouse Storage"
              options: [ noatime ]

        wireguard:
            interface: "wg0"
            address: "192.168.1.0/32"
            private_key: "<private_key>"
            peers:
                - public_key: "<public_key>"
                  allowed_ips: [ "192.168.1.0/24" ]
                  endpoint: "<end.point.com:51820>"
                  persistent_keepalive: 25

        ethereum:

            # In this section, all of the key-value pairs have values that are 
            # the same as the defaults set in the corresponding Jinja2 template.

            # These values are included here only for the purpose of example 
            # and to help keep track of which options have been coded in.

            clients:
                # Execution Layer Clients
                # ! bug on ethereum.nix/modules/erigon/default.nix !
                # erigon:
                #     # General
                #     enable: true
                #     extraArgs: []
                #     openFirewall: true
                #     package: "pkgs.erigon"
                #     subVolume: true

                #     # Args
                #     datadir: null
                #     port: 30303
                #     network: "mainnet"
                #     externalcl: true
                #     snapshots: true
                #     torrent_port: 42069

                #     http: # HTTP-Server
                #         enable: false
                #         addr: "127.0.0.1"
                #         port: 8545
                #         api: null
                #         compression: true
                #         corsdomain: null
                #         trace: true
                #         vhosts: [ "localhost" ]

                #     ws: # WebSocket (WS)
                #         compression: flase
                #         enable: true

                #     authrpc: # RPC-Authentication
                #         addr: "127.0.0.1"
                #         port: 8551
                #         jwtsecret: null
                #         vhosts: [ "localhost" ]

                #     metrics: # Metrics
                #         enable: true
                #         addr: "127.0.0.1"
                #         port: 6060

                #     private_api: # Private API
                #         addr: "127.0.0.1:9090"
                #         ratelimit: 31872

                # Consensus Layer Clients
                lighthouse:
                    # General
                    enable: true
                    openFirewall: true

                    # Args
                    datadir:
                    exec_jwtsecret:
                    exec_addr:
                    exec_port:
                    deposit_contract_sync_disable: false
                    checkpoint_sync_url: null
                    prune_payloads_enable: true
                    
                    http: # HTTP-Server
                        enable: true
                        addr: "127.0.0.1"
                        port: 5042

                    metrics: # Metrics
                        enable: true
                        addr: "127.0.0.1"
                        port: 5054

                    slasher: # Slasher
                        enable: false
                        history_lenght: 4096
                        max_db_size: 256

                    mev: # MEV-Boost
                        enable: true
                        port: 18550
                        endpoint: "127.0.0.1"

    - name: "hostname_2"

      mounts:
        - source: "/dev/disk/by-label/geth"
          target: "/var/mnt/geth"
          desc: "Erigon Storage"
          options: [ noatime ]

      services:

        # You can use wireguard OR tailscale

        wireguard:
            interface: "wg0"
            address: "192.168.1.1/32"
            private_key: "<private_key>"
            peers:
                - public_key: "<public_key>"
                  allowed_ips: [ "192.168.1.0/24" ]
                  endpoint: "<end.point.com:51820>"
                  persistent_keepalive: 25

        tailscale:
            enable: true
            port: 41641
            permit_cert_uid: null
            interface: "tailscale0"

        ethereum:
            clients:
                # Execution Layer Clients
                geth:
                    # General
                    enable: true
                    extraArgs: []
                    openFirewall: true
                    package: "pkgs.geth"

                    # Args
                    bootnodes: null
                    datadir: null
                    gcmode: "full"
                    maxpeers: 50
                    netrestrict: null
                    network: "mainnet"
                    networkid: 1
                    nodiscover: false
                    port: 30303
                    syncmode: "snap"
                    verbosity: 3

                    http: # HTTP-Server
                        enable: true
                        addr: "127.0.0.1"
                        port: 8545
                        api: null
                        corsdomain: null
                        rpcprefix: null
                        vhosts: [ "localhost" ]

                    ws: # WebSocket (WS)
                        enable: true
                        addr: "127.0.0.1"
                        port: 8546
                        api: null

                    authrpc: # RPC-Authentication
                        addr: "127.0.0.1"
                        port: 8551
                        jwtsecret: null
                        vhosts: [ "localhost" ]

                    metrics: # Metrics
                        enable: true
                        addr: "127.0.0.1"
                        port: 6060

                # Consensus Layer Clients
                # ! error on build: https://github.com/prysmaticlabs/prysm/pull/12084 !
                # prysm:
                #     # General
                #     enable: true
                #     extraArgs: []
                #     openFirewall: true
                #     package: "pkgs.prysm"

                #     # Args
                #     network: "mainnet"
                #     datadir: null
                #     p2p_udp_port: 12000
                #     p2p_tcp_port: 13000
                #     jwtsecret: ""
                #     datadir: null
                #     checkpoint_sync_url: null
                #     genesis_beacon_api_url: null

                #     authrpc: # RPC-Authentication
                #         addr: "127.0.0.1"
                #         port: 4000
                     
                #     grpc_gateway: # gRPC-Gateway
                #         enable: true
                #         addr: "127.0.0.1"
                #         port: 3500

                #     monitoring: # Monitoring
                #         enable: true
                #         addr: "127.0.0.1"
                #         port: 8080

                #     pprof: # pprof HTTP-Server
                #         enable: false
                #         addr: "127.0.0.1"
                #         port: 6060

                #     mev: # MEV-Boost
                #         enable: true
                #         endpoint: "127.0.0.1"
                #         port: 18550

    # Builds even with no key-value pairs
    - name: "hostname_3"